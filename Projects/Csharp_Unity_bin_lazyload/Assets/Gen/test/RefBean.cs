//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace cfg.test
{

public sealed partial class RefBean :  test.RefDynamicBase 
{
    public RefBean(ByteBuf _buf)  : base(_buf) 
    {
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Arr = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); Arr.Add(_e0);}}
        PostInit();
    }

    public static RefBean DeserializeRefBean(ByteBuf _buf)
    {
        return new test.RefBean(_buf);
    }

    public System.Collections.Generic.List<int> Arr { get; private set; }
    public System.Collections.Generic.List<test.TestBeRef> Arr_Ref { get; private set; }

    public const int __ID__ = 1963260263;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        { test.TbTestBeRef __table = (test.TbTestBeRef)_tables["test.TbTestBeRef"]; this.Arr_Ref = new System.Collections.Generic.List<test.TestBeRef>(); foreach(var __e in Arr) { this.Arr_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "X:" + X + ","
        + "Arr:" + Bright.Common.StringUtil.CollectionToString(Arr) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}

#  <auto-generated>
#    This code was generated by a tool.
#    Changes to this file may cause incorrect behavior and will be lost if
#    the code is regenerated.
#  </auto-generated>

class_name Types

enum AiEExecutor{
    CLIENT = 0,
    SERVER = 1,
}

enum AiEKeyType{
    BOOL = 1,
    INT = 2,
    FLOAT = 3,
    STRING = 4,
    VECTOR = 5,
    ROTATOR = 6,
    NAME = 7,
    CLASS = 8,
    ENUM = 9,
    OBJECT = 10,
}

enum AiEFlowAbortMode{
    NONE = 0,
    LOWER_PRIORITY = 1,
    SELF = 2,
    BOTH = 3,
}

enum AiEFinishMode{
    IMMEDIATE = 0,
    DELAYED = 1,
}

enum AiENotifyObserverMode{
    ON_VALUE_CHANGE = 0,
    ON_RESULT_CHANGE = 1,
}

enum AiEOperator{
    IS_EQUAL_TO = 0,
    IS_NOT_EQUAL_TO = 1,
    IS_LESS_THAN = 2,
    IS_LESS_THAN_OR_EQUAL_TO = 3,
    IS_GREAT_THAN = 4,
    IS_GREAT_THAN_OR_EQUAL_TO = 5,
    CONTAINS = 6,
    NOT_CONTAINS = 7,
}

enum CommonEBoolOperator{
    AND = 0,
    OR = 1,
}

enum ErrorEOperation{
    LOGOUT = 0, # 登出
    RESTART = 1, # 重启
}

enum ErrorEErrorCode{
    OK = 0,
    SERVER_NOT_EXISTS = 1,
    HAS_BIND_SERVER = 2,
    AUTH_FAIL = 3,
    NOT_BIND_SERVER = 4,
    SERVER_ACCESS_FAIL = 5,
    EXAMPLE_FLASH = 6,
    EXAMPLE_MSGBOX = 7,
    EXAMPLE_DLG_OK = 8,
    EXAMPLE_DLG_OK_CANCEL = 9,
    ROLE_CREATE_NAME_INVALID_CHAR = 100,
    ROLE_CREATE_NAME_EMPTY = 101,
    ROLE_CREATE_NAME_EXCEED_MAX_LENGTH = 102,
    ROLE_CREATE_ROLE_LIST_FULL = 103,
    ROLE_CREATE_INVALID_PROFESSION = 104,
    ROLE_CREATE_INVALID_GENDER = 105,
    ROLE_NOT_OWNED_BY_USER = 106,
    ROLE_LEVEL_NOT_ARRIVE = 107,
    PARAM_ILLEGAL = 200,
    TEMP_BAG_NOT_EMPTY = 201,
    ITEM_CAN_NOT_USE = 202,
    CURRENCY_NOT_ENOUGH = 203,
    BAG_IS_FULL = 204,
    ITEM_NOT_ENOUGH = 205,
    ITEM_IN_BAG = 206,
    GENDER_NOT_MATCH = 300,
    LEVEL_TOO_LOW = 301,
    LEVEL_TOO_HIGH = 302,
    EXCEED_LIMIT = 303,
    OVER_TIME = 304,
    SERVER_ERROR = 305,
    SKILL_NOT_IN_LIST = 400,
    SKILL_NOT_COOLDOWN = 401,
    SKILL_TARGET_NOT_EXIST = 402,
    SKILL_ANOTHER_CASTING = 403,
    SKILL_OUT_OF_DISTANCE = 404,
    SKILL_TARGET_CAMP_NOT_MATCH = 405,
    SKILL_INVALID_DIRECTION = 406,
    SKILL_NOT_IN_SELECT_SHAPE = 407,
    SKILL_ENERGY_NOT_ENOUGH = 408,
    DIALOG_NODE_NOT_CHOOSEN = 500,
    DIALOG_NOT_FINISH = 501,
    DIALOG_HAS_FINISH = 502,
    QUEST_STAGE_NOT_FINISHED = 503,
    QUEST_NOT_DOING = 504,
    QUEST_STAGE_NOT_DOING = 505,
    QUEST_HAS_ACCEPTED = 506,
    MAP_OBJECT_NOT_EXIST = 600,
    INTERACTION_OBJECT_NOT_SUPPORT_OPERATION = 601,
    HAS_NOT_EQUIP = 602,
    HANDHELD_EQUIP_ID_NOT_MATCH = 603,
    NOT_AVAILABLE_SUIT_ID = 604,
    NO_INTERACTION_COMPONENT = 605,
    HAS_INTERACTED = 606,
    VIALITY_NOT_ENOUGH = 607,
    PLAYER_SESSION_NOT_EXIST = 608,
    PLAYER_SESSION_WORLD_PLAYER_NOT_INIT = 609,
    MAP_NOT_EXIST = 610,
    MAIL_TYPE_ERROR = 700,
    MAIL_NOT_EXITST = 701,
    MAIL_HAVE_DELETED = 702,
    MAIL_AWARD_HAVE_RECEIVED = 703,
    MAIL_OPERATE_TYPE_ERROR = 704,
    MAIL_CONDITION_NOT_MEET = 705,
    MAIL_STATE_ERROR = 706,
    MAIL_NO_AWARD = 707,
    MAIL_BOX_IS_FULL = 708,
    PROP_SCORE_NOT_BIGGER_THAN = 800,
    NOT_WEAR_CLOTHES = 801,
    NOT_WEAR_SUIT = 802,
    SUIT_NOT_UNLOCK = 900,
    SUIT_COMPONENT_NOT_UNLOCK = 901,
    SUIT_STATE_ERROR = 902,
    SUIT_COMPONENT_STATE_ERROR = 903,
    SUIT_COMPONENT_NO_NEED_LEARN = 904,
    STORE_NOT_ENABLED = 1000,
    SHELF_NOT_ENABLED = 1001,
    GOODS_NOT_ENABLED = 1002,
    GOODS_NOT_IN_CUR_REFRESH = 1003,
    RETRY = 1100,
    NOT_COOLDOWN = 1101,
    SELFIE_UNLOCK = 1200,
    SELFIE_ALREADY_UNLOCK = 1201,
    SELFIE_LACK_STARTS = 1202,
    SELFIE_HAD_REWARD = 1203,
}


# 道具品质
enum ItemEItemQuality{
    WHITE = 0, # 白
    GREEN = 1, # 绿
    BLUE = 2, # 蓝
    PURPLE = 3, # 紫
    GOLDEN = 4, # 金
}

enum ItemECurrencyType{
    DIAMOND = 1, # 钻石
    GOLD = 2, # 金币
    SILVER = 3, # 银币
    EXP = 4, # 经验
    POWER_POINT = 5, # 能量点
}

enum ItemEMajorType{
    CURRENCY = 1, # 货币
    CLOTH = 2, # 服装
    QUEST = 3, # 任务
    CONSUMABLES = 4, # 消耗品
    TREASURE_BOX = 5, # 宝箱
    ACHIEVEMENT_AND_TITLE = 6, # 成就和称谓
    HEAD_FRAME = 7, # 头像框
    VOICE = 8, # 语音
    ACTION = 9, # 动作
    EXPANSION = 10, # 扩容道具
    MATERIAL = 11, # 制作材料
}

enum ItemEMinorType{
    DIAMOND = 101, # 钻石
    GOLD = 102, # 金币
    SILVER = 103, # 银币
    EXP = 104, # 经验
    POWER_POINT = 105, # 能量点
    HAIR_STYLE = 210, # 发型
    COAT = 220, # 外套
    UPPER_JACKET = 230, # 上衣
    TROUSERS = 241, # 裤子
    SKIRT = 242, # 裙子
    SOCKS = 250, # 袜子
    SHOES = 260, # 鞋子
    HAIR_ACCESSORY = 271, # 发饰
    HAT = 272, # 帽子
    EARRING = 273, # 耳饰
    NECKLACE = 274, # 颈饰
    BRACELET = 275, # 腕饰
    HAIR_CLASP = 276, # 发箍
    GLOVE = 277, # 手套
    HANDHELD_OBJECT = 278, # 手持物
    SPECIAL = 279, # 特殊
    BASE_COSMETIC = 281, # 底妆
    EYEBROW_COSMETIC = 282, # 眉妆
    EYELASH = 283, # 睫毛
    COSMETIC_CONTACT_LENSES = 284, # 美瞳
    LIP_COSMETIC = 285, # 唇妆
    SKIN_COLOR = 286, # 肤色
    ONE_PIECE_DRESS = 290, # 连衣裙
    SWITCH_CLOTHES_SCENE = 291, # 换装场景
    QUEST = 301, # 任务道具
    CAST = 401, # 投掷物
    SWORD = 421, # 刀剑
    BOW_ARROW = 422, # 弓箭
    WANDS = 423, # 法杖
    SPECIAL_TOOL = 424, # 特殊工具
    FOOD = 403, # 食物
    TREASURE_BOX = 501, # 宝箱
    KEY = 502, # 钥匙
    MULTI_CHOOSE_TREASURE_BOX = 503, # 多选一宝箱
    ACHIEVEMENT = 601, # 成就相关
    TITLE = 602, # 称谓相关
    AVATAR_FRAME = 701, # 头像框
    VOICE = 801, # 语音
    IDLE_POSE = 901, # 特殊待机动作
    PHOTO_POSE = 902, # 拍照动作
    BAG = 1001, # 背包
    FRIEND_CAPACITY = 1002, # 好友数量
    CONSTRUCTION_MATERIAL = 1101, # 制作材料
    DESIGN_DRAWING = 1102, # 设计图纸
}

enum ItemEClothersStarQualityType{
    ONE = 1, # 一星
    TWO = 2, # 二星
    THREE = 3, # 三星
    FOUR = 4, # 四星
    FIVE = 5, # 五星
    SIX = 6, # 六星
    SEVEN = 7, # 七星
    EIGHT = 8, # 八星
    NINE = 9, # 九星
    TEN = 10, # 十星
}

enum ItemEClothersTag{
    FANG_SHAI = 1, # 防晒
    WU_ZHE = 2, # 舞者
}

enum ItemEUseType{
    MANUAL = 0, # 手动
    AUTO = 1, # 自动
}

enum ItemEClothesHidePartType{
    CHEST = 0, # 胸部
    HEAD = 1, # 手
    SPINE_UPPER = 2, # 脊柱上
    SPINE_LOWER = 3, # 脊柱下
    HIP = 4, # 臀部
    LEG_UPPER = 5, # 腿上
    LEG_MIDDLE = 6, # 腿中
    LEG_LOWER = 7, # 腿下
}

enum ItemEClothesPropertyType{
    JIAN_YUE = 1, # 简约
    HUA_LI = 2, # 华丽
    KE_AI = 3, # 可爱
    CHENG_SHU = 4, # 成熟
    HUO_PO = 5, # 活泼
    YOU_YA = 6, # 优雅
    QING_CHUN = 7, # 清纯
    XING_GAN = 8, # 性感
    QING_LIANG = 9, # 清凉
    BAO_NUAN = 10, # 保暖
}

enum ItemEItemFunctionType{
    REPLACE_HANDHELD = 0, # 更换手持物
    USE_DESIGN_DRAWING = 1, # 使用设计图纸
}

enum LimitENamespace{
    ITEM_DAILY_OBTAIN = 1,
    TREASURE_DAILY_USE = 2,
    STORE_GOODS_LIMIT_BUY = 3,
}

enum MailEMailType{
    GLOBAL = 0, # 全局邮件
    SYSTEM = 1, # 系统邮件
}

enum RoleEGenderType{
    MALE = 1, # 男
    FEMALE = 2, # 女
}

enum RoleEProfession{
    TEST_PROFESSION = 1,
}

enum TestDemoEnum{
    NONE = 0,
    A = 1, # aa
    B = 2, # bb
    C = 4, # cc
    D = 5, # dd
}

enum TestDemoFlag{
    A = 1,
    B = 2,
    D = 3,
}

enum TestETestUeType{
    WHITE = 0, # 白
    BLACK = 1,
}

enum TestETestEmptyEnum{
}

enum TestETestEmptyEnum2{
    SMALL_THAN_256 = 255,
    X_256 = 256,
    X_257 = 257,
}

enum TestAudioType{
    UNKNOWN = 0,
    ACC = 1,
    AIFF = 2,
}

enum TestETestQuality{
    A = 1, # 最高品质
    B = 2, # 黑色的
    C = 3, # 蓝色的
    D = 4, # 最差品质
}

enum TestAccessFlag{
    WRITE = 1,
    READ = 2,
    TRUNCATE = 4,
    NEW = 8,
    READ_WRITE = 3,
}

class AiTbBlackboard:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = AiBlackboard.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.name] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class AiBlackboard:
    
    var name
    var desc
    var parent_name
    var keys
    func _init(_json_) -> void:
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.parent_name = _json_['parent_name']
        self.keys = []
        for _ele in _json_['keys']:
            var _e = AiBlackboardKey.new(_ele);
            self.keys.append(_e)


class AiBlackboardKey:
    
    var name
    var desc
    var is_static
    var type
    var type_class_name
    func _init(_json_) -> void:
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.is_static = _json_['is_static']
        self.type = _json_['type']
        self.type_class_name = _json_['type_class_name']


class AiTbBehaviorTree:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = AiBehaviorTree.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class AiBehaviorTree:
    
    var id
    var name
    var desc
    var blackboard_id
    var root
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.blackboard_id = _json_['blackboard_id']
        self.root = AiComposeNode.from_json(_json_['root'])


class AiNode:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "UeSetDefaultFocus":
                return AiUeSetDefaultFocus.new(_json_)
            "ExecuteTimeStatistic":
                return AiExecuteTimeStatistic.new(_json_)
            "ChooseTarget":
                return AiChooseTarget.new(_json_)
            "KeepFaceTarget":
                return AiKeepFaceTarget.new(_json_)
            "GetOwnerPlayer":
                return AiGetOwnerPlayer.new(_json_)
            "UpdateDailyBehaviorProps":
                return AiUpdateDailyBehaviorProps.new(_json_)
            "UeLoop":
                return AiUeLoop.new(_json_)
            "UeCooldown":
                return AiUeCooldown.new(_json_)
            "UeTimeLimit":
                return AiUeTimeLimit.new(_json_)
            "UeBlackboard":
                return AiUeBlackboard.new(_json_)
            "UeForceSuccess":
                return AiUeForceSuccess.new(_json_)
            "IsAtLocation":
                return AiIsAtLocation.new(_json_)
            "DistanceLessThan":
                return AiDistanceLessThan.new(_json_)
            "Sequence":
                return AiSequence.new(_json_)
            "Selector":
                return AiSelector.new(_json_)
            "SimpleParallel":
                return AiSimpleParallel.new(_json_)
            "UeWait":
                return AiUeWait.new(_json_)
            "UeWaitBlackboardTime":
                return AiUeWaitBlackboardTime.new(_json_)
            "MoveToTarget":
                return AiMoveToTarget.new(_json_)
            "ChooseSkill":
                return AiChooseSkill.new(_json_)
            "MoveToRandomLocation":
                return AiMoveToRandomLocation.new(_json_)
            "MoveToLocation":
                return AiMoveToLocation.new(_json_)
            "DebugPrint":
                return AiDebugPrint.new(_json_)
            _:
                assert(false)

    var id
    var node_name
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.node_name = _json_['node_name']


class AiService:
    
    extends AiNode
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "UeSetDefaultFocus":
                return AiUeSetDefaultFocus.new(_json_)
            "ExecuteTimeStatistic":
                return AiExecuteTimeStatistic.new(_json_)
            "ChooseTarget":
                return AiChooseTarget.new(_json_)
            "KeepFaceTarget":
                return AiKeepFaceTarget.new(_json_)
            "GetOwnerPlayer":
                return AiGetOwnerPlayer.new(_json_)
            "UpdateDailyBehaviorProps":
                return AiUpdateDailyBehaviorProps.new(_json_)
            _:
                assert(false)

    func _init(_json_).(_json_) -> void:

        pass


class AiUeSetDefaultFocus:
    
    extends AiService
    
    var keyboard_key
    func _init(_json_).(_json_) -> void:
        self.keyboard_key = _json_['keyboard_key']


class AiExecuteTimeStatistic:
    
    extends AiService
    
    func _init(_json_).(_json_) -> void:

        pass


class AiChooseTarget:
    
    extends AiService
    
    var result_target_key
    func _init(_json_).(_json_) -> void:
        self.result_target_key = _json_['result_target_key']


class AiKeepFaceTarget:
    
    extends AiService
    
    var target_actor_key
    func _init(_json_).(_json_) -> void:
        self.target_actor_key = _json_['target_actor_key']


class AiGetOwnerPlayer:
    
    extends AiService
    
    var player_actor_key
    func _init(_json_).(_json_) -> void:
        self.player_actor_key = _json_['player_actor_key']


class AiUpdateDailyBehaviorProps:
    
    extends AiService
    
    var satiety_key
    var energy_key
    var mood_key
    var satiety_lower_threshold_key
    var satiety_upper_threshold_key
    var energy_lower_threshold_key
    var energy_upper_threshold_key
    var mood_lower_threshold_key
    var mood_upper_threshold_key
    func _init(_json_).(_json_) -> void:
        self.satiety_key = _json_['satiety_key']
        self.energy_key = _json_['energy_key']
        self.mood_key = _json_['mood_key']
        self.satiety_lower_threshold_key = _json_['satiety_lower_threshold_key']
        self.satiety_upper_threshold_key = _json_['satiety_upper_threshold_key']
        self.energy_lower_threshold_key = _json_['energy_lower_threshold_key']
        self.energy_upper_threshold_key = _json_['energy_upper_threshold_key']
        self.mood_lower_threshold_key = _json_['mood_lower_threshold_key']
        self.mood_upper_threshold_key = _json_['mood_upper_threshold_key']


class AiDecorator:
    
    extends AiNode
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "UeLoop":
                return AiUeLoop.new(_json_)
            "UeCooldown":
                return AiUeCooldown.new(_json_)
            "UeTimeLimit":
                return AiUeTimeLimit.new(_json_)
            "UeBlackboard":
                return AiUeBlackboard.new(_json_)
            "UeForceSuccess":
                return AiUeForceSuccess.new(_json_)
            "IsAtLocation":
                return AiIsAtLocation.new(_json_)
            "DistanceLessThan":
                return AiDistanceLessThan.new(_json_)
            _:
                assert(false)

    var flow_abort_mode
    func _init(_json_).(_json_) -> void:
        self.flow_abort_mode = _json_['flow_abort_mode']


class AiUeLoop:
    
    extends AiDecorator
    
    var num_loops
    var infinite_loop
    var infinite_loop_timeout_time
    func _init(_json_).(_json_) -> void:
        self.num_loops = _json_['num_loops']
        self.infinite_loop = _json_['infinite_loop']
        self.infinite_loop_timeout_time = _json_['infinite_loop_timeout_time']


class AiUeCooldown:
    
    extends AiDecorator
    
    var cooldown_time
    func _init(_json_).(_json_) -> void:
        self.cooldown_time = _json_['cooldown_time']


class AiUeTimeLimit:
    
    extends AiDecorator
    
    var limit_time
    func _init(_json_).(_json_) -> void:
        self.limit_time = _json_['limit_time']


class AiUeBlackboard:
    
    extends AiDecorator
    
    var notify_observer
    var blackboard_key
    var key_query
    func _init(_json_).(_json_) -> void:
        self.notify_observer = _json_['notify_observer']
        self.blackboard_key = _json_['blackboard_key']
        self.key_query = AiKeyQueryOperator.from_json(_json_['key_query'])


class AiKeyQueryOperator:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "IsSet":
                return AiIsSet.new(_json_)
            "IsNotSet":
                return AiIsNotSet.new(_json_)
            "BinaryOperator":
                return AiBinaryOperator.new(_json_)
            _:
                assert(false)

    func _init(_json_) -> void:

        pass


class AiIsSet:
    
    extends AiKeyQueryOperator
    
    func _init(_json_).(_json_) -> void:

        pass


class AiIsNotSet:
    
    extends AiKeyQueryOperator
    
    func _init(_json_).(_json_) -> void:

        pass


class AiBinaryOperator:
    
    extends AiKeyQueryOperator
    
    var oper
    var data
    func _init(_json_).(_json_) -> void:
        self.oper = _json_['oper']
        self.data = AiKeyData.from_json(_json_['data'])


class AiKeyData:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "FloatKeyData":
                return AiFloatKeyData.new(_json_)
            "IntKeyData":
                return AiIntKeyData.new(_json_)
            "StringKeyData":
                return AiStringKeyData.new(_json_)
            "BlackboardKeyData":
                return AiBlackboardKeyData.new(_json_)
            _:
                assert(false)

    func _init(_json_) -> void:

        pass


class AiFloatKeyData:
    
    extends AiKeyData
    
    var value
    func _init(_json_).(_json_) -> void:
        self.value = _json_['value']


class AiIntKeyData:
    
    extends AiKeyData
    
    var value
    func _init(_json_).(_json_) -> void:
        self.value = _json_['value']


class AiStringKeyData:
    
    extends AiKeyData
    
    var value
    func _init(_json_).(_json_) -> void:
        self.value = _json_['value']


class AiBlackboardKeyData:
    
    extends AiKeyData
    
    var value
    func _init(_json_).(_json_) -> void:
        self.value = _json_['value']


class AiUeForceSuccess:
    
    extends AiDecorator
    
    func _init(_json_).(_json_) -> void:

        pass


class AiIsAtLocation:
    
    extends AiDecorator
    
    var acceptable_radius
    var keyboard_key
    var inverse_condition
    func _init(_json_).(_json_) -> void:
        self.acceptable_radius = _json_['acceptable_radius']
        self.keyboard_key = _json_['keyboard_key']
        self.inverse_condition = _json_['inverse_condition']


class AiDistanceLessThan:
    
    extends AiDecorator
    
    var actor1_key
    var actor2_key
    var distance
    var reverse_result
    func _init(_json_).(_json_) -> void:
        self.actor1_key = _json_['actor1_key']
        self.actor2_key = _json_['actor2_key']
        self.distance = _json_['distance']
        self.reverse_result = _json_['reverse_result']


class AiFlowNode:
    
    extends AiNode
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "Sequence":
                return AiSequence.new(_json_)
            "Selector":
                return AiSelector.new(_json_)
            "SimpleParallel":
                return AiSimpleParallel.new(_json_)
            "UeWait":
                return AiUeWait.new(_json_)
            "UeWaitBlackboardTime":
                return AiUeWaitBlackboardTime.new(_json_)
            "MoveToTarget":
                return AiMoveToTarget.new(_json_)
            "ChooseSkill":
                return AiChooseSkill.new(_json_)
            "MoveToRandomLocation":
                return AiMoveToRandomLocation.new(_json_)
            "MoveToLocation":
                return AiMoveToLocation.new(_json_)
            "DebugPrint":
                return AiDebugPrint.new(_json_)
            _:
                assert(false)

    var decorators
    var services
    func _init(_json_).(_json_) -> void:
        self.decorators = []
        for _ele in _json_['decorators']:
            var _e = AiDecorator.from_json(_ele);
            self.decorators.append(_e)
        self.services = []
        for _ele in _json_['services']:
            var _e = AiService.from_json(_ele);
            self.services.append(_e)


class AiComposeNode:
    
    extends AiFlowNode
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "Sequence":
                return AiSequence.new(_json_)
            "Selector":
                return AiSelector.new(_json_)
            "SimpleParallel":
                return AiSimpleParallel.new(_json_)
            _:
                assert(false)

    func _init(_json_).(_json_) -> void:

        pass


class AiSequence:
    
    extends AiComposeNode
    
    var children
    func _init(_json_).(_json_) -> void:
        self.children = []
        for _ele in _json_['children']:
            var _e = AiFlowNode.from_json(_ele);
            self.children.append(_e)


class AiSelector:
    
    extends AiComposeNode
    
    var children
    func _init(_json_).(_json_) -> void:
        self.children = []
        for _ele in _json_['children']:
            var _e = AiFlowNode.from_json(_ele);
            self.children.append(_e)


class AiSimpleParallel:
    
    extends AiComposeNode
    
    var finish_mode
    var main_task
    var background_node
    func _init(_json_).(_json_) -> void:
        self.finish_mode = _json_['finish_mode']
        self.main_task = AiTask.from_json(_json_['main_task'])
        self.background_node = AiFlowNode.from_json(_json_['background_node'])


class AiTask:
    
    extends AiFlowNode
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "UeWait":
                return AiUeWait.new(_json_)
            "UeWaitBlackboardTime":
                return AiUeWaitBlackboardTime.new(_json_)
            "MoveToTarget":
                return AiMoveToTarget.new(_json_)
            "ChooseSkill":
                return AiChooseSkill.new(_json_)
            "MoveToRandomLocation":
                return AiMoveToRandomLocation.new(_json_)
            "MoveToLocation":
                return AiMoveToLocation.new(_json_)
            "DebugPrint":
                return AiDebugPrint.new(_json_)
            _:
                assert(false)

    var ignore_restart_self
    func _init(_json_).(_json_) -> void:
        self.ignore_restart_self = _json_['ignore_restart_self']


class AiUeWait:
    
    extends AiTask
    
    var wait_time
    var random_deviation
    func _init(_json_).(_json_) -> void:
        self.wait_time = _json_['wait_time']
        self.random_deviation = _json_['random_deviation']


class AiUeWaitBlackboardTime:
    
    extends AiTask
    
    var blackboard_key
    func _init(_json_).(_json_) -> void:
        self.blackboard_key = _json_['blackboard_key']


class AiMoveToTarget:
    
    extends AiTask
    
    var target_actor_key
    var acceptable_radius
    func _init(_json_).(_json_) -> void:
        self.target_actor_key = _json_['target_actor_key']
        self.acceptable_radius = _json_['acceptable_radius']


class AiChooseSkill:
    
    extends AiTask
    
    var target_actor_key
    var result_skill_id_key
    func _init(_json_).(_json_) -> void:
        self.target_actor_key = _json_['target_actor_key']
        self.result_skill_id_key = _json_['result_skill_id_key']


class AiMoveToRandomLocation:
    
    extends AiTask
    
    var origin_position_key
    var radius
    func _init(_json_).(_json_) -> void:
        self.origin_position_key = _json_['origin_position_key']
        self.radius = _json_['radius']


class AiMoveToLocation:
    
    extends AiTask
    
    var location
    var acceptable_radius
    func _init(_json_).(_json_) -> void:
        self.location = Vector3(_json_['location']['x'], _json_['location']['y'], _json_['location']['z'])
        self.acceptable_radius = _json_['acceptable_radius']


class AiDebugPrint:
    
    extends AiTask
    
    var text
    func _init(_json_).(_json_) -> void:
        self.text = _json_['text']


class BlueprintTbClazz:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = BlueprintClazz.from_json(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.name] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class BlueprintClazz:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "Interface":
                return BlueprintInterface.new(_json_)
            "NormalClazz":
                return BlueprintNormalClazz.new(_json_)
            "EnumClazz":
                return BlueprintEnumClazz.new(_json_)
            _:
                assert(false)

    var name
    var desc
    var parents
    var methods
    func _init(_json_) -> void:
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.parents = []
        for _ele in _json_['parents']:
            var _e = BlueprintClazz.from_json(_ele);
            self.parents.append(_e)
        self.methods = []
        for _ele in _json_['methods']:
            var _e = BlueprintMethod.from_json(_ele);
            self.methods.append(_e)


class BlueprintMethod:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "AbstraceMethod":
                return BlueprintAbstraceMethod.new(_json_)
            "ExternalMethod":
                return BlueprintExternalMethod.new(_json_)
            "BlueprintMethod":
                return BlueprintBlueprintMethod.new(_json_)
            _:
                assert(false)

    var name
    var desc
    var is_static
    var return_type
    var parameters
    func _init(_json_) -> void:
        self.name = _json_['name']
        self.desc = _json_['desc']
        self.is_static = _json_['is_static']
        self.return_type = _json_['return_type']
        self.parameters = []
        for _ele in _json_['parameters']:
            var _e = BlueprintParamInfo.new(_ele);
            self.parameters.append(_e)


class BlueprintParamInfo:
    
    var name
    var type
    var is_ref
    func _init(_json_) -> void:
        self.name = _json_['name']
        self.type = _json_['type']
        self.is_ref = _json_['is_ref']


class BlueprintAbstraceMethod:
    
    extends BlueprintMethod
    
    func _init(_json_).(_json_) -> void:

        pass


class BlueprintExternalMethod:
    
    extends BlueprintMethod
    
    func _init(_json_).(_json_) -> void:

        pass


class BlueprintBlueprintMethod:
    
    extends BlueprintMethod
    
    func _init(_json_).(_json_) -> void:

        pass


class BlueprintInterface:
    
    extends BlueprintClazz
    
    func _init(_json_).(_json_) -> void:

        pass


class BlueprintNormalClazz:
    
    extends BlueprintClazz
    
    var is_abstract
    var fields
    func _init(_json_).(_json_) -> void:
        self.is_abstract = _json_['is_abstract']
        self.fields = []
        for _ele in _json_['fields']:
            var _e = BlueprintField.new(_ele);
            self.fields.append(_e)


class BlueprintField:
    
    var name
    var type
    var desc
    func _init(_json_) -> void:
        self.name = _json_['name']
        self.type = _json_['type']
        self.desc = _json_['desc']


class BlueprintEnumClazz:
    
    extends BlueprintClazz
    
    var enums
    func _init(_json_).(_json_) -> void:
        self.enums = []
        for _ele in _json_['enums']:
            var _e = BlueprintEnumField.new(_ele);
            self.enums.append(_e)


class BlueprintEnumField:
    
    var name
    var value
    func _init(_json_) -> void:
        self.name = _json_['name']
        self.value = _json_['value']


class BonusTbDrop:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = BonusDropInfo.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class BonusDropInfo:
    
    var id
    var desc
    var client_show_items
    var bonus
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.desc = _json_['desc']
        self.client_show_items = []
        for _ele in _json_['client_show_items']:
            var _e = BonusShowItemInfo.new(_ele);
            self.client_show_items.append(_e)
        self.bonus = BonusBonus.from_json(_json_['bonus'])


class BonusShowItemInfo:
    
    var item_id
    var item_num
    func _init(_json_) -> void:
        self.item_id = _json_['item_id']
        self.item_num = _json_['item_num']


class BonusBonus:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "OneItem":
                return BonusOneItem.new(_json_)
            "OneItems":
                return BonusOneItems.new(_json_)
            "Item":
                return BonusItem.new(_json_)
            "Items":
                return BonusItems.new(_json_)
            "CoefficientItem":
                return BonusCoefficientItem.new(_json_)
            "WeightItems":
                return BonusWeightItems.new(_json_)
            "ProbabilityItems":
                return BonusProbabilityItems.new(_json_)
            "MultiBonus":
                return BonusMultiBonus.new(_json_)
            "ProbabilityBonus":
                return BonusProbabilityBonus.new(_json_)
            "WeightBonus":
                return BonusWeightBonus.new(_json_)
            "DropBonus":
                return BonusDropBonus.new(_json_)
            _:
                assert(false)

    func _init(_json_) -> void:

        pass


class BonusOneItem:
    
    extends BonusBonus
    
    var item_id
    func _init(_json_).(_json_) -> void:
        self.item_id = _json_['item_id']


class BonusOneItems:
    
    extends BonusBonus
    
    var items
    func _init(_json_).(_json_) -> void:
        self.items = _json_['items']


class BonusItem:
    
    extends BonusBonus
    
    var item_id
    var amount
    func _init(_json_).(_json_) -> void:
        self.item_id = _json_['item_id']
        self.amount = _json_['amount']


class BonusItems:
    
    extends BonusBonus
    
    var item_list
    func _init(_json_).(_json_) -> void:
        self.item_list = []
        for _ele in _json_['item_list']:
            var _e = BonusItem.new(_ele);
            self.item_list.append(_e)


class BonusCoefficientItem:
    
    extends BonusBonus
    
    var bonus_id
    var bonus_list
    func _init(_json_).(_json_) -> void:
        self.bonus_id = _json_['bonus_id']
        self.bonus_list = BonusItems.new(_json_['bonus_list'])


class BonusWeightItems:
    
    extends BonusBonus
    
    var item_list
    func _init(_json_).(_json_) -> void:
        self.item_list = []
        for _ele in _json_['item_list']:
            var _e = BonusWeightItemInfo.new(_ele);
            self.item_list.append(_e)


class BonusWeightItemInfo:
    
    var item_id
    var num
    var weight
    func _init(_json_) -> void:
        self.item_id = _json_['item_id']
        self.num = _json_['num']
        self.weight = _json_['weight']


class BonusProbabilityItems:
    
    extends BonusBonus
    
    var item_list
    func _init(_json_).(_json_) -> void:
        self.item_list = []
        for _ele in _json_['item_list']:
            var _e = BonusProbabilityItemInfo.new(_ele);
            self.item_list.append(_e)


class BonusProbabilityItemInfo:
    
    var item_id
    var num
    var probability
    func _init(_json_) -> void:
        self.item_id = _json_['item_id']
        self.num = _json_['num']
        self.probability = _json_['probability']


class BonusMultiBonus:
    
    extends BonusBonus
    
    var bonuses
    func _init(_json_).(_json_) -> void:
        self.bonuses = []
        for _ele in _json_['bonuses']:
            var _e = BonusBonus.from_json(_ele);
            self.bonuses.append(_e)


class BonusProbabilityBonus:
    
    extends BonusBonus
    
    var bonuses
    func _init(_json_).(_json_) -> void:
        self.bonuses = []
        for _ele in _json_['bonuses']:
            var _e = BonusProbabilityBonusInfo.new(_ele);
            self.bonuses.append(_e)


class BonusProbabilityBonusInfo:
    
    var bonus
    var probability
    func _init(_json_) -> void:
        self.bonus = BonusBonus.from_json(_json_['bonus'])
        self.probability = _json_['probability']


class BonusWeightBonus:
    
    extends BonusBonus
    
    var bonuses
    func _init(_json_).(_json_) -> void:
        self.bonuses = []
        for _ele in _json_['bonuses']:
            var _e = BonusWeightBonusInfo.new(_ele);
            self.bonuses.append(_e)


class BonusWeightBonusInfo:
    
    var bonus
    var weight
    func _init(_json_) -> void:
        self.bonus = BonusBonus.from_json(_json_['bonus'])
        self.weight = _json_['weight']


class BonusDropBonus:
    
    extends BonusBonus
    
    var id
    func _init(_json_).(_json_) -> void:
        self.id = _json_['id']


class CommonTbGlobalConfig:
    var _data: Dictionary
    func _init(_json_) -> void:
        assert(len(_json_) == 1, 'table mode=one, but size != 1')
        self._data = _json_[0]

    func get_data() -> Dictionary: 
        return self._data

    # 背包容量
    func bag_capacity():
        return self._data.bag_capacity
    func bag_capacity_special():
        return self._data.bag_capacity_special
    func bag_temp_expendable_capacity():
        return self._data.bag_temp_expendable_capacity
    func bag_temp_tool_capacity():
        return self._data.bag_temp_tool_capacity
    func bag_init_capacity():
        return self._data.bag_init_capacity
    func quick_bag_capacity():
        return self._data.quick_bag_capacity
    func cloth_bag_capacity():
        return self._data.cloth_bag_capacity
    func cloth_bag_init_capacity():
        return self._data.cloth_bag_init_capacity
    func cloth_bag_capacity_special():
        return self._data.cloth_bag_capacity_special
    func bag_init_items_drop_id():
        return self._data.bag_init_items_drop_id
    func mail_box_capacity():
        return self._data.mail_box_capacity
    func damage_param_c():
        return self._data.damage_param_c
    func damage_param_e():
        return self._data.damage_param_e
    func damage_param_f():
        return self._data.damage_param_f
    func damage_param_d():
        return self._data.damage_param_d
    func role_speed():
        return self._data.role_speed
    func monster_speed():
        return self._data.monster_speed
    func init_energy():
        return self._data.init_energy
    func init_viality():
        return self._data.init_viality
    func max_viality():
        return self._data.max_viality
    func per_viality_recovery_time():
        return self._data.per_viality_recovery_time


class CommonGlobalConfig:
    
    var bag_capacity
    var bag_capacity_special
    var bag_temp_expendable_capacity
    var bag_temp_tool_capacity
    var bag_init_capacity
    var quick_bag_capacity
    var cloth_bag_capacity
    var cloth_bag_init_capacity
    var cloth_bag_capacity_special
    var bag_init_items_drop_id
    var mail_box_capacity
    var damage_param_c
    var damage_param_e
    var damage_param_f
    var damage_param_d
    var role_speed
    var monster_speed
    var init_energy
    var init_viality
    var max_viality
    var per_viality_recovery_time
    func _init(_json_) -> void:
        self.bag_capacity = _json_['bag_capacity']
        self.bag_capacity_special = _json_['bag_capacity_special']
        self.bag_temp_expendable_capacity = _json_['bag_temp_expendable_capacity']
        self.bag_temp_tool_capacity = _json_['bag_temp_tool_capacity']
        self.bag_init_capacity = _json_['bag_init_capacity']
        self.quick_bag_capacity = _json_['quick_bag_capacity']
        self.cloth_bag_capacity = _json_['cloth_bag_capacity']
        self.cloth_bag_init_capacity = _json_['cloth_bag_init_capacity']
        self.cloth_bag_capacity_special = _json_['cloth_bag_capacity_special']
        if _json_.get('bag_init_items_drop_id') != null: self.bag_init_items_drop_id = _json_['bag_init_items_drop_id']
        self.mail_box_capacity = _json_['mail_box_capacity']
        self.damage_param_c = _json_['damage_param_c']
        self.damage_param_e = _json_['damage_param_e']
        self.damage_param_f = _json_['damage_param_f']
        self.damage_param_d = _json_['damage_param_d']
        self.role_speed = _json_['role_speed']
        self.monster_speed = _json_['monster_speed']
        self.init_energy = _json_['init_energy']
        self.init_viality = _json_['init_viality']
        self.max_viality = _json_['max_viality']
        self.per_viality_recovery_time = _json_['per_viality_recovery_time']


class ErrorTbErrorInfo:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = ErrorErrorInfo.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.code] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class ErrorErrorInfo:
    
    var code
    var desc
    var style
    func _init(_json_) -> void:
        self.code = _json_['code']
        self.desc = _json_['desc']
        self.style = ErrorErrorStyle.from_json(_json_['style'])


class ErrorErrorStyle:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "ErrorStyleTip":
                return ErrorErrorStyleTip.new(_json_)
            "ErrorStyleMsgbox":
                return ErrorErrorStyleMsgbox.new(_json_)
            "ErrorStyleDlgOk":
                return ErrorErrorStyleDlgOk.new(_json_)
            "ErrorStyleDlgOkCancel":
                return ErrorErrorStyleDlgOkCancel.new(_json_)
            _:
                assert(false)

    func _init(_json_) -> void:

        pass


class ErrorErrorStyleTip:
    
    extends ErrorErrorStyle
    
    func _init(_json_).(_json_) -> void:

        pass


class ErrorErrorStyleMsgbox:
    
    extends ErrorErrorStyle
    
    var btn_name
    var operation
    func _init(_json_).(_json_) -> void:
        self.btn_name = _json_['btn_name']
        self.operation = _json_['operation']


class ErrorErrorStyleDlgOk:
    
    extends ErrorErrorStyle
    
    var btn_name
    func _init(_json_).(_json_) -> void:
        self.btn_name = _json_['btn_name']


class ErrorErrorStyleDlgOkCancel:
    
    extends ErrorErrorStyle
    
    var btn1_name
    var btn2_name
    func _init(_json_).(_json_) -> void:
        self.btn1_name = _json_['btn1_name']
        self.btn2_name = _json_['btn2_name']


class ErrorTbCodeInfo:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = ErrorCodeInfo.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.code] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class ErrorCodeInfo:
    
    var code
    var key
    func _init(_json_) -> void:
        self.code = _json_['code']
        self.key = _json_['key']


class ItemTbItem:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = ItemItem.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class ItemItem:
    
    var id
    var name
    var major_type
    var minor_type
    var max_pile_num
    var quality
    var icon
    var icon_backgroud
    var icon_mask
    var desc
    var show_order
    var quantifier
    var show_in_bag
    var min_show_level
    var batch_usable
    var progress_time_when_use
    var show_hint_when_use
    var droppable
    var price
    var use_type
    var level_up_id
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']
        self.major_type = _json_['major_type']
        self.minor_type = _json_['minor_type']
        self.max_pile_num = _json_['max_pile_num']
        self.quality = _json_['quality']
        self.icon = _json_['icon']
        self.icon_backgroud = _json_['icon_backgroud']
        self.icon_mask = _json_['icon_mask']
        self.desc = _json_['desc']
        self.show_order = _json_['show_order']
        self.quantifier = _json_['quantifier']
        self.show_in_bag = _json_['show_in_bag']
        self.min_show_level = _json_['min_show_level']
        self.batch_usable = _json_['batch_usable']
        self.progress_time_when_use = _json_['progress_time_when_use']
        self.show_hint_when_use = _json_['show_hint_when_use']
        self.droppable = _json_['droppable']
        if _json_.get('price') != null: self.price = _json_['price']
        self.use_type = _json_['use_type']
        if _json_.get('level_up_id') != null: self.level_up_id = _json_['level_up_id']


class ItemTbItemFunc:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = ItemItemFunction.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.minor_type] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class ItemItemFunction:
    
    var minor_type
    var func_type
    var method
    var close_bag_ui
    func _init(_json_) -> void:
        self.minor_type = _json_['minor_type']
        self.func_type = _json_['func_type']
        self.method = _json_['method']
        self.close_bag_ui = _json_['close_bag_ui']


class ItemTbItemExtra:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = ItemItemExtra.from_json(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class ItemItemExtra:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "TreasureBox":
                return ItemTreasureBox.new(_json_)
            "InteractionItem":
                return ItemInteractionItem.new(_json_)
            "Clothes":
                return ItemClothes.new(_json_)
            "DesignDrawing":
                return ItemDesignDrawing.new(_json_)
            "Dymmy":
                return ItemDymmy.new(_json_)
            _:
                assert(false)

    var id
    func _init(_json_) -> void:
        self.id = _json_['id']


class ItemTreasureBox:
    
    extends ItemItemExtra
    
    var key_item_id
    var open_level
    var use_on_obtain
    var drop_ids
    var choose_list
    func _init(_json_).(_json_) -> void:
        if _json_.get('key_item_id') != null: self.key_item_id = _json_['key_item_id']
        self.open_level = ConditionMinLevel.new(_json_['open_level'])
        self.use_on_obtain = _json_['use_on_obtain']
        self.drop_ids = _json_['drop_ids']
        self.choose_list = []
        for _ele in _json_['choose_list']:
            var _e = ItemChooseOneBonus.new(_ele);
            self.choose_list.append(_e)


class ConditionCondition:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "TimeRange":
                return ConditionTimeRange.new(_json_)
            "MultiRoleCondition":
                return ConditionMultiRoleCondition.new(_json_)
            "GenderLimit":
                return ConditionGenderLimit.new(_json_)
            "MinLevel":
                return ConditionMinLevel.new(_json_)
            "MaxLevel":
                return ConditionMaxLevel.new(_json_)
            "MinMaxLevel":
                return ConditionMinMaxLevel.new(_json_)
            "ClothesPropertyScoreGreaterThan":
                return ConditionClothesPropertyScoreGreaterThan.new(_json_)
            "ContainsItem":
                return ConditionContainsItem.new(_json_)
            _:
                assert(false)

    func _init(_json_) -> void:

        pass


class ConditionTimeRange:
    
    extends ConditionCondition
    
    var date_time_range
    func _init(_json_).(_json_) -> void:
        self.date_time_range = CommonDateTimeRange.new(_json_['date_time_range'])


class CommonDateTimeRange:
    
    var start_time
    var end_time
    func _init(_json_) -> void:
        if _json_.get('start_time') != null: self.start_time = _json_['start_time']
        if _json_.get('end_time') != null: self.end_time = _json_['end_time']


class ConditionRoleCondition:
    
    extends ConditionCondition
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "MultiRoleCondition":
                return ConditionMultiRoleCondition.new(_json_)
            "GenderLimit":
                return ConditionGenderLimit.new(_json_)
            "MinLevel":
                return ConditionMinLevel.new(_json_)
            "MaxLevel":
                return ConditionMaxLevel.new(_json_)
            "MinMaxLevel":
                return ConditionMinMaxLevel.new(_json_)
            "ClothesPropertyScoreGreaterThan":
                return ConditionClothesPropertyScoreGreaterThan.new(_json_)
            "ContainsItem":
                return ConditionContainsItem.new(_json_)
            _:
                assert(false)

    func _init(_json_).(_json_) -> void:

        pass


class ConditionMultiRoleCondition:
    
    extends ConditionRoleCondition
    
    var conditions
    func _init(_json_).(_json_) -> void:
        self.conditions = []
        for _ele in _json_['conditions']:
            var _e = ConditionRoleCondition.from_json(_ele);
            self.conditions.append(_e)


class ConditionBoolRoleCondition:
    
    extends ConditionRoleCondition
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "GenderLimit":
                return ConditionGenderLimit.new(_json_)
            "MinLevel":
                return ConditionMinLevel.new(_json_)
            "MaxLevel":
                return ConditionMaxLevel.new(_json_)
            "MinMaxLevel":
                return ConditionMinMaxLevel.new(_json_)
            "ClothesPropertyScoreGreaterThan":
                return ConditionClothesPropertyScoreGreaterThan.new(_json_)
            _:
                assert(false)

    func _init(_json_).(_json_) -> void:

        pass


class ConditionGenderLimit:
    
    extends ConditionBoolRoleCondition
    
    var gender
    func _init(_json_).(_json_) -> void:
        self.gender = _json_['gender']


class ConditionMinLevel:
    
    extends ConditionBoolRoleCondition
    
    var level
    func _init(_json_).(_json_) -> void:
        self.level = _json_['level']


class ConditionMaxLevel:
    
    extends ConditionBoolRoleCondition
    
    var level
    func _init(_json_).(_json_) -> void:
        self.level = _json_['level']


class ConditionMinMaxLevel:
    
    extends ConditionBoolRoleCondition
    
    var min_level
    var max_level
    func _init(_json_).(_json_) -> void:
        self.min_level = _json_['min_level']
        self.max_level = _json_['max_level']


class ConditionClothesPropertyScoreGreaterThan:
    
    extends ConditionBoolRoleCondition
    
    var prop
    var value
    func _init(_json_).(_json_) -> void:
        self.prop = _json_['prop']
        self.value = _json_['value']


class ConditionContainsItem:
    
    extends ConditionRoleCondition
    
    var item_id
    var num
    var reverse
    func _init(_json_).(_json_) -> void:
        self.item_id = _json_['item_id']
        self.num = _json_['num']
        self.reverse = _json_['reverse']


class ItemChooseOneBonus:
    
    var drop_id
    var is_unique
    func _init(_json_) -> void:
        self.drop_id = _json_['drop_id']
        self.is_unique = _json_['is_unique']


class ItemInteractionItem:
    
    extends ItemItemExtra
    
    var attack_num
    var holding_static_mesh
    var holding_static_mesh_mat
    func _init(_json_).(_json_) -> void:
        if _json_.get('attack_num') != null: self.attack_num = _json_['attack_num']
        self.holding_static_mesh = _json_['holding_static_mesh']
        self.holding_static_mesh_mat = _json_['holding_static_mesh_mat']


class ItemClothes:
    
    extends ItemItemExtra
    
    var attack
    var hp
    var energy_limit
    var energy_resume
    func _init(_json_).(_json_) -> void:
        self.attack = _json_['attack']
        self.hp = _json_['hp']
        self.energy_limit = _json_['energy_limit']
        self.energy_resume = _json_['energy_resume']


class ItemDesignDrawing:
    
    extends ItemItemExtra
    
    var learn_component_id
    func _init(_json_).(_json_) -> void:
        self.learn_component_id = _json_['learn_component_id']


class ItemDymmy:
    
    extends ItemItemExtra
    
    var cost
    func _init(_json_).(_json_) -> void:
        self.cost = CostCost.from_json(_json_['cost'])


class CostCost:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "CostCurrency":
                return CostCostCurrency.new(_json_)
            "CostCurrencies":
                return CostCostCurrencies.new(_json_)
            "CostOneItem":
                return CostCostOneItem.new(_json_)
            "CostItem":
                return CostCostItem.new(_json_)
            "CostItems":
                return CostCostItems.new(_json_)
            _:
                assert(false)

    func _init(_json_) -> void:

        pass


class CostCostCurrency:
    
    extends CostCost
    
    var type
    var num
    func _init(_json_).(_json_) -> void:
        self.type = _json_['type']
        self.num = _json_['num']


class CostCostCurrencies:
    
    extends CostCost
    
    var currencies
    func _init(_json_).(_json_) -> void:
        self.currencies = []
        for _ele in _json_['currencies']:
            var _e = CostCostCurrency.new(_ele);
            self.currencies.append(_e)


class CostCostOneItem:
    
    extends CostCost
    
    var item_id
    func _init(_json_).(_json_) -> void:
        self.item_id = _json_['item_id']


class CostCostItem:
    
    extends CostCost
    
    var item_id
    var amount
    func _init(_json_).(_json_) -> void:
        self.item_id = _json_['item_id']
        self.amount = _json_['amount']


class CostCostItems:
    
    extends CostCost
    
    var item_list
    func _init(_json_).(_json_) -> void:
        self.item_list = []
        for _ele in _json_['item_list']:
            var _e = CostCostItem.new(_ele);
            self.item_list.append(_e)


class L10nTbL10NDemo:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = L10nL10NDemo.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class L10nL10NDemo:
    
    var id
    var text
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.text = _json_['text']['text']


class L10nTbPatchDemo:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = L10nPatchDemo.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class L10nPatchDemo:
    
    var id
    var value
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.value = _json_['value']


class MailTbSystemMail:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = MailSystemMail.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class MailSystemMail:
    
    var id
    var title
    var sender
    var content
    var award
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.title = _json_['title']
        self.sender = _json_['sender']
        self.content = _json_['content']
        self.award = _json_['award']


class MailTbGlobalMail:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = MailGlobalMail.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class MailGlobalMail:
    
    var id
    var title
    var sender
    var content
    var award
    var all_server
    var server_list
    var platform
    var channel
    var min_max_level
    var register_time
    var mail_time
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.title = _json_['title']
        self.sender = _json_['sender']
        self.content = _json_['content']
        self.award = _json_['award']
        self.all_server = _json_['all_server']
        self.server_list = _json_['server_list']
        self.platform = _json_['platform']
        self.channel = _json_['channel']
        self.min_max_level = ConditionMinMaxLevel.new(_json_['min_max_level'])
        self.register_time = ConditionTimeRange.new(_json_['register_time'])
        self.mail_time = ConditionTimeRange.new(_json_['mail_time'])


class RoleTbRoleLevelExpAttr:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = RoleLevelExpAttr.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.level] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class RoleLevelExpAttr:
    
    var level
    var need_exp
    var clothes_attrs
    func _init(_json_) -> void:
        self.level = _json_['level']
        self.need_exp = _json_['need_exp']
        self.clothes_attrs = _json_['clothes_attrs']


class RoleTbRoleLevelBonusCoefficient:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = RoleLevelBonus.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class RoleLevelBonus:
    
    var id
    var distinct_bonus_infos
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.distinct_bonus_infos = []
        for _ele in _json_['distinct_bonus_infos']:
            var _e = RoleDistinctBonusInfos.new(_ele);
            self.distinct_bonus_infos.append(_e)


class RoleDistinctBonusInfos:
    
    var effective_level
    var bonus_info
    func _init(_json_) -> void:
        self.effective_level = _json_['effective_level']
        self.bonus_info = []
        for _ele in _json_['bonus_info']:
            var _e = RoleBonusInfo.new(_ele);
            self.bonus_info.append(_e)


class RoleBonusInfo:
    
    var type
    var coefficient
    func _init(_json_) -> void:
        self.type = _json_['type']
        self.coefficient = _json_['coefficient']


class TagTbTestTag:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TagTestTag.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TagTestTag:
    
    var id
    var value
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.value = _json_['value']


class TestTbFullTypes:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoType2.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.x4] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestDemoType2:
    
    var x4
    var x1
    var x2
    var x3
    var x5
    var x6
    var x7
    var x8_0
    var x8
    var x9
    var x10
    var x12
    var x13
    var x14
    var s1
    var v2
    var v3
    var v4
    var t1
    var k1
    var k2
    var k5
    var k8
    var k9
    var k15
    func _init(_json_) -> void:
        self.x4 = _json_['x4']
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x7 = _json_['x7']
        self.x8_0 = _json_['x8_0']
        self.x8 = _json_['x8']
        self.x9 = _json_['x9']
        self.x10 = _json_['x10']
        self.x12 = TestDemoType1.new(_json_['x12'])
        self.x13 = _json_['x13']
        self.x14 = TestDemoDynamic.from_json(_json_['x14'])
        self.s1 = _json_['s1']['text']
        self.v2 = Vector2(_json_['v2']['x'], _json_['v2']['y'])
        self.v3 = Vector3(_json_['v3']['x'], _json_['v3']['y'], _json_['v3']['z'])
        self.v4 = Vector3(_json_['v4']['x'], _json_['v4']['y'], _json_['v4']['z'])
        self.t1 = _json_['t1']
        self.k1 = _json_['k1']
        self.k2 = _json_['k2']
        self.k5 = _json_['k5']
        self.k8 = {}
        for _v in _json_['k8']:
            self.k8[_v[0]] =_v[1]
        self.k9 = []
        for _ele in _json_['k9']:
            var _e = TestDemoE2.new(_ele);
            self.k9.append(_e)
        self.k15 = []
        for _ele in _json_['k15']:
            var _e = TestDemoDynamic.from_json(_ele);
            self.k15.append(_e)


class TestDemoType1:
    
    var x1
    func _init(_json_) -> void:
        self.x1 = _json_['x1']


class TestDemoDynamic:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "DemoD2":
                return TestDemoD2.new(_json_)
            "DemoE1":
                return TestDemoE1.new(_json_)
            "test.login.RoleInfo":
                return Test_loginRoleInfo.new(_json_)
            "DemoD5":
                return TestDemoD5.new(_json_)
            _:
                assert(false)

    var x1
    func _init(_json_) -> void:
        self.x1 = _json_['x1']


class TestDemoD2:
    
    extends TestDemoDynamic
    
    var x2
    func _init(_json_).(_json_) -> void:
        self.x2 = _json_['x2']


class TestDemoD3:
    
    extends TestDemoDynamic
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "DemoE1":
                return TestDemoE1.new(_json_)
            "test.login.RoleInfo":
                return Test_loginRoleInfo.new(_json_)
            _:
                assert(false)

    var x3
    func _init(_json_).(_json_) -> void:
        self.x3 = _json_['x3']


class TestDemoE1:
    
    extends TestDemoD3
    
    var x4
    func _init(_json_).(_json_) -> void:
        self.x4 = _json_['x4']


class Test_loginRoleInfo:
    
    extends TestDemoD3
    
    var role_id
    func _init(_json_).(_json_) -> void:
        self.role_id = _json_['role_id']


class TestDemoD5:
    
    extends TestDemoDynamic
    
    var time
    func _init(_json_).(_json_) -> void:
        self.time = TestDateTimeRange.new(_json_['time'])


class TestDateTimeRange:
    
    var start_time
    var end_time
    func _init(_json_) -> void:
        self.start_time = _json_['start_time']
        self.end_time = _json_['end_time']


class TestDemoE2:
    
    var y1
    var y2
    func _init(_json_) -> void:
        if _json_.get('y1') != null: self.y1 = _json_['y1']
        self.y2 = _json_['y2']


class TestTbSingleton:
    var _data: Dictionary
    func _init(_json_) -> void:
        assert(len(_json_) == 1, 'table mode=one, but size != 1')
        self._data = _json_[0]

    func get_data() -> Dictionary: 
        return self._data

    func id():
        return self._data.id
    func name():
        return self._data.name
    func date():
        return self._data.date


class TestDemoSingletonType:
    
    var id
    var name
    var date
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']['text']
        self.date = TestDemoDynamic.from_json(_json_['date'])


class TestTbNotIndexList:
    var _data_list
    func _init(_json_) -> void:
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestNotIndexList.new(_json2_)
            self._data_list.append(_v)

    func get_data_list():
        return self._data_list

    func get(index):
        return self._data_list[index]



class TestNotIndexList:
    
    var x
    var y
    func _init(_json_) -> void:
        self.x = _json_['x']
        self.y = _json_['y']


class TestTbMultiUnionIndexList:
    var _data_list
    func _init(_json_) -> void:
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestMultiUnionIndexList.new(_json2_)
            self._data_list.append(_v)

    func get_data_list():
        return self._data_list

    func get(index):
        return self._data_list[index]



class TestMultiUnionIndexList:
    
    var id1
    var id2
    var id3
    var num
    var desc
    func _init(_json_) -> void:
        self.id1 = _json_['id1']
        self.id2 = _json_['id2']
        self.id3 = _json_['id3']
        self.num = _json_['num']
        self.desc = _json_['desc']


class TestTbMultiIndexList:
    var _data_list
    func _init(_json_) -> void:
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestMultiIndexList.new(_json2_)
            self._data_list.append(_v)

    func get_data_list():
        return self._data_list

    func get(index):
        return self._data_list[index]



class TestMultiIndexList:
    
    var id1
    var id2
    var id3
    var num
    var desc
    func _init(_json_) -> void:
        self.id1 = _json_['id1']
        self.id2 = _json_['id2']
        self.id3 = _json_['id3']
        self.num = _json_['num']
        self.desc = _json_['desc']


class TestTbDataFromMisc:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoType2.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.x4] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTbMultiRowRecord:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestMultiRowRecord.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestMultiRowRecord:
    
    var id
    var name
    var one_rows
    var multi_rows1
    var multi_rows2
    var multi_rows4
    var multi_rows5
    var multi_rows6
    var multi_rows7
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']
        self.one_rows = []
        for _ele in _json_['one_rows']:
            var _e = TestMultiRowType1.new(_ele);
            self.one_rows.append(_e)
        self.multi_rows1 = []
        for _ele in _json_['multi_rows1']:
            var _e = TestMultiRowType1.new(_ele);
            self.multi_rows1.append(_e)
        self.multi_rows2 = []
        for _ele in _json_['multi_rows2']:
            var _e = TestMultiRowType1.new(_ele);
            self.multi_rows2.append(_e)
        self.multi_rows4 = {}
        for _v in _json_['multi_rows4']:
            self.multi_rows4[_v[0]] =_v[1]
        self.multi_rows5 = []
        for _ele in _json_['multi_rows5']:
            var _e = TestMultiRowType3.new(_ele);
            self.multi_rows5.append(_e)
        self.multi_rows6 = {}
        for _v in _json_['multi_rows6']:
            self.multi_rows6[_v[0]] =_v[1]
        self.multi_rows7 = {}
        for _v in _json_['multi_rows7']:
            self.multi_rows7[_v[0]] =_v[1]


class TestMultiRowType1:
    
    var id
    var x
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x = _json_['x']


class TestMultiRowType2:
    
    var id
    var x
    var y
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x = _json_['x']
        self.y = _json_['y']


class TestMultiRowType3:
    
    var id
    var items
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.items = []
        for _ele in _json_['items']:
            var _e = TestMultiRowType1.new(_ele);
            self.items.append(_e)


class TestTbTestMultiColumn:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestMultiColumn.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestMultiColumn:
    
    var id
    var a
    var b
    var c
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.a = TestFoo.new(_json_['a'])
        self.b = TestFoo.new(_json_['b'])
        self.c = TestFoo.new(_json_['c'])


class TestFoo:
    
    var y1
    var y2
    var y3
    func _init(_json_) -> void:
        self.y1 = _json_['y1']
        self.y2 = _json_['y2']
        self.y3 = _json_['y3']


class TestTbMultiRowTitle:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestMultiRowTitle.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestMultiRowTitle:
    
    var id
    var name
    var x1
    var x2_0
    var x2
    var x3
    var x4
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']
        self.x1 = TestH1.new(_json_['x1'])
        if _json_.get('x2_0') != null: self.x2_0 = TestH2.new(_json_['x2_0'])
        self.x2 = []
        for _ele in _json_['x2']:
            var _e = TestH2.new(_ele);
            self.x2.append(_e)
        self.x3 = []
        for _ele in _json_['x3']:
            var _e = TestH2.new(_ele);
            self.x3.append(_e)
        self.x4 = []
        for _ele in _json_['x4']:
            var _e = TestH2.new(_ele);
            self.x4.append(_e)


class TestH1:
    
    var y2
    var y3
    func _init(_json_) -> void:
        self.y2 = TestH2.new(_json_['y2'])
        self.y3 = _json_['y3']


class TestH2:
    
    var z2
    var z3
    func _init(_json_) -> void:
        self.z2 = _json_['z2']
        self.z3 = _json_['z3']


class TestTbTestNull:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestNull.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestNull:
    
    var id
    var x1
    var x2
    var x3
    var x4
    var s1
    var s2
    func _init(_json_) -> void:
        self.id = _json_['id']
        if _json_.get('x1') != null: self.x1 = _json_['x1']
        if _json_.get('x2') != null: self.x2 = _json_['x2']
        if _json_.get('x3') != null: self.x3 = TestDemoType1.new(_json_['x3'])
        if _json_.get('x4') != null: self.x4 = TestDemoDynamic.from_json(_json_['x4'])
        if _json_.get('s1') != null: self.s1 = _json_['s1']
        if _json_.get('s2') != null: self.s2 = _json_['s2']['text']


class TestTbDemoPrimitive:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoPrimitiveTypesTable.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.x4] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestDemoPrimitiveTypesTable:
    
    var x1
    var x2
    var x3
    var x4
    var x5
    var x6
    var x7
    var s1
    var s2
    var v2
    var v3
    var v4
    var t1
    func _init(_json_) -> void:
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = _json_['x4']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x7 = _json_['x7']
        self.s1 = _json_['s1']
        self.s2 = _json_['s2']['text']
        self.v2 = Vector2(_json_['v2']['x'], _json_['v2']['y'])
        self.v3 = Vector3(_json_['v3']['x'], _json_['v3']['y'], _json_['v3']['z'])
        self.v4 = Vector3(_json_['v4']['x'], _json_['v4']['y'], _json_['v4']['z'])
        self.t1 = _json_['t1']


class TestTbTestString:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestString.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestString:
    
    var id
    var s1
    var cs1
    var cs2
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.s1 = _json_['s1']
        self.cs1 = TestCompactString.new(_json_['cs1'])
        self.cs2 = TestCompactString.new(_json_['cs2'])


class TestCompactString:
    
    var id
    var s2
    var s3
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.s2 = _json_['s2']
        self.s3 = _json_['s3']


class TestTbDemoGroup:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoGroup.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestDemoGroup:
    
    var id
    var x1
    var x2
    var x3
    var x4
    var x5
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = _json_['x4']
        self.x5 = TestInnerGroup.new(_json_['x5'])


class TestInnerGroup:
    
    var y1
    var y2
    var y3
    var y4
    func _init(_json_) -> void:
        self.y1 = _json_['y1']
        self.y2 = _json_['y2']
        self.y3 = _json_['y3']
        self.y4 = _json_['y4']


class TestTbDemoGroup_C:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoGroup.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTbDemoGroup_S:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoGroup.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTbDemoGroup_E:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoGroup.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTbTestGlobal:
    var _data: Dictionary
    func _init(_json_) -> void:
        assert(len(_json_) == 1, 'table mode=one, but size != 1')
        self._data = _json_[0]

    func get_data() -> Dictionary: 
        return self._data

    func unlock_equip():
        return self._data.unlock_equip
    func unlock_hero():
        return self._data.unlock_hero


class TestTestGlobal:
    
    var unlock_equip
    var unlock_hero
    func _init(_json_) -> void:
        self.unlock_equip = _json_['unlock_equip']
        self.unlock_hero = _json_['unlock_hero']


class TestTbTestBeRef:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestBeRef.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestBeRef:
    
    var id
    var count
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.count = _json_['count']


class TestTbTestBeRef2:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestBeRef.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTbTestRef:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestRef.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestRef:
    
    var id
    var x1
    var x1_2
    var x2
    var x3
    var a1
    var a2
    var b1
    var b2
    var c1
    var c2
    var d1
    var d2
    var e1
    var e2
    var e3
    var f1
    var f2
    var f3
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x1_2 = _json_['x1_2']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.a1 = _json_['a1']
        self.a2 = _json_['a2']
        self.b1 = _json_['b1']
        self.b2 = _json_['b2']
        self.c1 = _json_['c1']
        self.c2 = _json_['c2']
        self.d1 = {}
        for _v in _json_['d1']:
            self.d1[_v[0]] =_v[1]
        self.d2 = {}
        for _v in _json_['d2']:
            self.d2[_v[0]] =_v[1]
        self.e1 = _json_['e1']
        self.e2 = _json_['e2']
        self.e3 = _json_['e3']
        self.f1 = _json_['f1']
        self.f2 = _json_['f2']
        self.f3 = _json_['f3']


class TestTbTestSize:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestSize.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestSize:
    
    var id
    var x1
    var x2
    var x3
    var x4
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = {}
        for _v in _json_['x4']:
            self.x4[_v[0]] =_v[1]


class TestTbTestSet:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestSet.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestSet:
    
    var id
    var x0
    var x1
    var x2
    var x3
    var x4
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x0 = _json_['x0']
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = []
        for _ele in _json_['x4']:
            var _e = _ele;
            self.x4.append(_e)


class TestTbDetectCsvEncoding:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDetectEncoding.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestDetectEncoding:
    
    var id
    var name
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']


class TestTbItem2:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestItemBase.from_json(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestItemBase:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "Item":
                return TestItem.new(_json_)
            "Equipment":
                return TestEquipment.new(_json_)
            "Decorator":
                return TestDecorator.new(_json_)
            _:
                assert(false)

    var id
    var name
    var desc
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']
        self.desc = _json_['desc']


class TestItem:
    
    extends TestItemBase
    
    var num
    var price
    func _init(_json_).(_json_) -> void:
        self.num = _json_['num']
        self.price = _json_['price']


class TestEquipment:
    
    extends TestItemBase
    
    var attr
    var value
    func _init(_json_).(_json_) -> void:
        self.attr = _json_['attr']
        self.value = _json_['value']


class TestDecorator:
    
    extends TestItemBase
    
    var duration
    func _init(_json_).(_json_) -> void:
        self.duration = _json_['duration']


class TestTbDefineFromExcel:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDefineFromExcel.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestDefineFromExcel:
    
    var id
    var x1
    var x5
    var x6
    var x8
    var x10
    var x13
    var x14
    var x15
    var v2
    var t1
    var k1
    var k2
    var k8
    var k9
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x8 = _json_['x8']
        self.x10 = _json_['x10']
        self.x13 = _json_['x13']
        self.x14 = TestDemoDynamic.from_json(_json_['x14'])
        self.x15 = TestShape.from_json(_json_['x15'])
        self.v2 = Vector2(_json_['v2']['x'], _json_['v2']['y'])
        self.t1 = _json_['t1']
        self.k1 = _json_['k1']
        self.k2 = _json_['k2']
        self.k8 = {}
        for _v in _json_['k8']:
            self.k8[_v[0]] =_v[1]
        self.k9 = []
        for _ele in _json_['k9']:
            var _e = TestDemoE2.new(_ele);
            self.k9.append(_e)


class TestShape:
    
    static func from_json(_json_):
        var type = _json_['$type']
        match type:
            "Circle":
                return TestCircle.new(_json_)
            "test2.Rectangle":
                return Test2Rectangle.new(_json_)
            _:
                assert(false)

    func _init(_json_) -> void:

        pass


class TestCircle:
    
    extends TestShape
    
    var radius
    func _init(_json_).(_json_) -> void:
        self.radius = _json_['radius']


class Test2Rectangle:
    
    extends TestShape
    
    var width
    var height
    func _init(_json_).(_json_) -> void:
        self.width = _json_['width']
        self.height = _json_['height']


class TestTbDefineFromExcelOne:
    var _data: Dictionary
    func _init(_json_) -> void:
        assert(len(_json_) == 1, 'table mode=one, but size != 1')
        self._data = _json_[0]

    func get_data() -> Dictionary: 
        return self._data

    # 装备解锁等级
    func unlock_equip():
        return self._data.unlock_equip
    # 英雄解锁等级
    func unlock_hero():
        return self._data.unlock_hero
    func default_avatar():
        return self._data.default_avatar
    func default_item():
        return self._data.default_item
    func e2():
        return self._data.e2
    func icons():
        return self._data.icons


class TestDefineFromExcelOne:
    
    var unlock_equip
    var unlock_hero
    var default_avatar
    var default_item
    var e2
    var icons
    func _init(_json_) -> void:
        self.unlock_equip = _json_['unlock_equip']
        self.unlock_hero = _json_['unlock_hero']
        self.default_avatar = _json_['default_avatar']
        self.default_item = _json_['default_item']
        self.e2 = TestDemoE2.new(_json_['e2'])
        self.icons = _json_['icons']


class TestTbTestIndex:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestIndex.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestIndex:
    
    var id
    var eles
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.eles = []
        for _ele in _json_['eles']:
            var _e = TestDemoType1.new(_ele);
            self.eles.append(_e)


class TestTbTestMap:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestMap.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestMap:
    
    var id
    var x1
    var x2
    var x3
    var x4
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x1 = {}
        for _v in _json_['x1']:
            self.x1[_v[0]] =_v[1]
        self.x2 = {}
        for _v in _json_['x2']:
            self.x2[_v[0]] =_v[1]
        self.x3 = {}
        for _v in _json_['x3']:
            self.x3[_v[0]] =_v[1]
        self.x4 = {}
        for _v in _json_['x4']:
            self.x4[_v[0]] =_v[1]


class TestTbExcelFromJson:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestExcelFromJson.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.x4] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestExcelFromJson:
    
    var x4
    var x1
    var x5
    var x6
    var s1
    var s2
    var v2
    var v3
    var v4
    var t1
    var x12
    var x13
    var x14
    var k1
    var k8
    var k9
    var k15
    func _init(_json_) -> void:
        self.x4 = _json_['x4']
        self.x1 = _json_['x1']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.s1 = _json_['s1']
        self.s2 = _json_['s2']['text']
        self.v2 = Vector2(_json_['v2']['x'], _json_['v2']['y'])
        self.v3 = Vector3(_json_['v3']['x'], _json_['v3']['y'], _json_['v3']['z'])
        self.v4 = Vector3(_json_['v4']['x'], _json_['v4']['y'], _json_['v4']['z'])
        self.t1 = _json_['t1']
        self.x12 = TestDemoType1.new(_json_['x12'])
        self.x13 = _json_['x13']
        self.x14 = TestDemoDynamic.from_json(_json_['x14'])
        self.k1 = _json_['k1']
        self.k8 = {}
        for _v in _json_['k8']:
            self.k8[_v[0]] =_v[1]
        self.k9 = []
        for _ele in _json_['k9']:
            var _e = TestDemoE2.new(_ele);
            self.k9.append(_e)
        self.k15 = []
        for _ele in _json_['k15']:
            var _e = TestDemoDynamic.from_json(_ele);
            self.k15.append(_e)


class TestTbCompositeJsonTable1:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestCompositeJsonTable1.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestCompositeJsonTable1:
    
    var id
    var x
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x = _json_['x']


class TestTbCompositeJsonTable2:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestCompositeJsonTable2.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestCompositeJsonTable2:
    
    var id
    var y
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.y = _json_['y']


class TestTbCompositeJsonTable3:
    var _data: Dictionary
    func _init(_json_) -> void:
        assert(len(_json_) == 1, 'table mode=one, but size != 1')
        self._data = _json_[0]

    func get_data() -> Dictionary: 
        return self._data

    func a():
        return self._data.a
    func b():
        return self._data.b


class TestCompositeJsonTable3:
    
    var a
    var b
    func _init(_json_) -> void:
        self.a = _json_['a']
        self.b = _json_['b']


class TestTbExcelFromJsonMultiRow:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestExcelFromJsonMultiRow.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestExcelFromJsonMultiRow:
    
    var id
    var x
    var items
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x = _json_['x']
        self.items = []
        for _ele in _json_['items']:
            var _e = TestTestRow.new(_ele);
            self.items.append(_e)


class TestTestRow:
    
    var x
    var y
    var z
    var a
    var b
    func _init(_json_) -> void:
        self.x = _json_['x']
        self.y = _json_['y']
        self.z = _json_['z']
        self.a = TestTest3.new(_json_['a'])
        self.b = _json_['b']


class TestTest3:
    
    var x
    var y
    func _init(_json_) -> void:
        self.x = _json_['x']
        self.y = _json_['y']


class TestTbTestSep:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestSep.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestSep:
    
    var id
    var x1
    var x2
    var x3
    var x4
    var x5
    var x6
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x1 = _json_['x1']['text']
        self.x2 = TestSepBean1.new(_json_['x2'])
        self.x3 = TestSepVector.new(_json_['x3'])
        self.x4 = []
        for _ele in _json_['x4']:
            var _e = TestSepVector.new(_ele);
            self.x4.append(_e)
        self.x5 = []
        for _ele in _json_['x5']:
            var _e = TestSepBean1.new(_ele);
            self.x5.append(_e)
        self.x6 = []
        for _ele in _json_['x6']:
            var _e = TestSepBean1.new(_ele);
            self.x6.append(_e)


class TestSepBean1:
    
    var a
    var b
    var c
    func _init(_json_) -> void:
        self.a = _json_['a']
        self.b = _json_['b']
        self.c = _json_['c']


class TestSepVector:
    
    var x
    var y
    var z
    func _init(_json_) -> void:
        self.x = _json_['x']
        self.y = _json_['y']
        self.z = _json_['z']


class TestTbTestScriptableObject:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestScriptableObject.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestScriptableObject:
    
    var id
    var desc
    var rate
    var num
    var v2
    var v3
    var v4
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.desc = _json_['desc']
        self.rate = _json_['rate']
        self.num = _json_['num']
        self.v2 = Vector2(_json_['v2']['x'], _json_['v2']['y'])
        self.v3 = Vector3(_json_['v3']['x'], _json_['v3']['y'], _json_['v3']['z'])
        self.v4 = Vector3(_json_['v4']['x'], _json_['v4']['y'], _json_['v4']['z'])


class TestTbTestExternalType:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestExternalType.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestExternalType:
    
    var id
    var audio_type
    var color
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.audio_type = _json_['audio_type']
        self.color = TestColor.new(_json_['color'])


class TestColor:
    
    var r
    var g
    var b
    var a
    func _init(_json_) -> void:
        self.r = _json_['r']
        self.g = _json_['g']
        self.b = _json_['b']
        self.a = _json_['a']


class TestTbDemoGroupDefineFromExcel:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDemoGroup.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTbDefineFromExcel2:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestDefineFromExcel2.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestDefineFromExcel2:
    
    var id
    var x1
    var x5
    var x6
    var x8
    var x10
    var x13
    var x14
    var x15
    var v2
    var t1
    var k1
    var k2
    var k8
    var k9
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.x1 = _json_['x1']
        self.x5 = _json_['x5']
        self.x6 = _json_['x6']
        self.x8 = _json_['x8']
        self.x10 = _json_['x10']
        self.x13 = _json_['x13']
        self.x14 = TestDemoDynamic.from_json(_json_['x14'])
        self.x15 = TestShape.from_json(_json_['x15'])
        self.v2 = Vector2(_json_['v2']['x'], _json_['v2']['y'])
        self.t1 = _json_['t1']
        self.k1 = _json_['k1']
        self.k2 = _json_['k2']
        self.k8 = {}
        for _v in _json_['k8']:
            self.k8[_v[0]] =_v[1]
        self.k9 = []
        for _ele in _json_['k9']:
            var _e = TestDemoE2.new(_ele);
            self.k9.append(_e)


class TestTbTestExcelBean:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestExcelBean1.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.x1] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestExcelBean1:
    
    var x1
    var x2
    var x3
    var x4
    func _init(_json_) -> void:
        self.x1 = _json_['x1']
        self.x2 = _json_['x2']
        self.x3 = _json_['x3']
        self.x4 = _json_['x4']


class TestTbTestDesc:
    var _data_map = {}
    var _data_list = []

    func _init(_json_) -> void:
        self._data_map = {}
        self._data_list = []
        
        for _json2_ in _json_:
            var _v
            _v = TestTestDesc.new(_json2_)
            self._data_list.append(_v)
            self._data_map[_v.id] = _v

    func get_data_map() -> Dictionary:
        return self._data_map
    func get_data_list() -> Array:
        return self._data_list

    func get(key): 
        return self._data_map.get(key)


class TestTestDesc:
    
    var id
    var name
    var a1
    var a2
    var x1
    var x2
    var x3
    func _init(_json_) -> void:
        self.id = _json_['id']
        self.name = _json_['name']
        self.a1 = _json_['a1']
        self.a2 = _json_['a2']
        self.x1 = TestH1.new(_json_['x1'])
        self.x2 = []
        for _ele in _json_['x2']:
            var _e = TestH2.new(_ele);
            self.x2.append(_e)
        self.x3 = []
        for _ele in _json_['x3']:
            var _e = TestH2.new(_ele);
            self.x3.append(_e)


var TbBlackboard: AiTbBlackboard
var TbBehaviorTree: AiTbBehaviorTree
var TbClazz: BlueprintTbClazz
var TbDrop: BonusTbDrop
var TbGlobalConfig: CommonTbGlobalConfig
var TbErrorInfo: ErrorTbErrorInfo
var TbCodeInfo: ErrorTbCodeInfo
var TbItem: ItemTbItem
var TbItemFunc: ItemTbItemFunc
var TbItemExtra: ItemTbItemExtra
var TbL10NDemo: L10nTbL10NDemo
var TbPatchDemo: L10nTbPatchDemo
var TbSystemMail: MailTbSystemMail
var TbGlobalMail: MailTbGlobalMail
var TbRoleLevelExpAttr: RoleTbRoleLevelExpAttr
var TbRoleLevelBonusCoefficient: RoleTbRoleLevelBonusCoefficient
var TbTestTag: TagTbTestTag
var TbFullTypes: TestTbFullTypes
var TbSingleton: TestTbSingleton
var TbNotIndexList: TestTbNotIndexList
var TbMultiUnionIndexList: TestTbMultiUnionIndexList
var TbMultiIndexList: TestTbMultiIndexList
var TbDataFromMisc: TestTbDataFromMisc
var TbMultiRowRecord: TestTbMultiRowRecord
var TbTestMultiColumn: TestTbTestMultiColumn
var TbMultiRowTitle: TestTbMultiRowTitle
var TbTestNull: TestTbTestNull
var TbDemoPrimitive: TestTbDemoPrimitive
var TbTestString: TestTbTestString
var TbDemoGroup: TestTbDemoGroup
var TbDemoGroup_C: TestTbDemoGroup_C
var TbDemoGroup_S: TestTbDemoGroup_S
var TbDemoGroup_E: TestTbDemoGroup_E
var TbTestGlobal: TestTbTestGlobal
var TbTestBeRef: TestTbTestBeRef
var TbTestBeRef2: TestTbTestBeRef2
var TbTestRef: TestTbTestRef
var TbTestSize: TestTbTestSize
var TbTestSet: TestTbTestSet
var TbDetectCsvEncoding: TestTbDetectCsvEncoding
var TbItem2: TestTbItem2
var TbDefineFromExcel: TestTbDefineFromExcel
var TbDefineFromExcelOne: TestTbDefineFromExcelOne
var TbTestIndex: TestTbTestIndex
var TbTestMap: TestTbTestMap
var TbExcelFromJson: TestTbExcelFromJson
var TbCompositeJsonTable1: TestTbCompositeJsonTable1
var TbCompositeJsonTable2: TestTbCompositeJsonTable2
var TbCompositeJsonTable3: TestTbCompositeJsonTable3
var TbExcelFromJsonMultiRow: TestTbExcelFromJsonMultiRow
var TbTestSep: TestTbTestSep
var TbTestScriptableObject: TestTbTestScriptableObject
var TbTestExternalType: TestTbTestExternalType
var TbDemoGroupDefineFromExcel: TestTbDemoGroupDefineFromExcel
var TbDefineFromExcel2: TestTbDefineFromExcel2
var TbTestExcelBean: TestTbTestExcelBean
var TbTestDesc: TestTbTestDesc

func _init(loader) -> void:
    self.TbBlackboard = AiTbBlackboard.new(loader.call('ai_tbblackboard'))
    self.TbBehaviorTree = AiTbBehaviorTree.new(loader.call('ai_tbbehaviortree'))
    self.TbClazz = BlueprintTbClazz.new(loader.call('blueprint_tbclazz'))
    self.TbDrop = BonusTbDrop.new(loader.call('bonus_tbdrop'))
    self.TbGlobalConfig = CommonTbGlobalConfig.new(loader.call('common_tbglobalconfig'))
    self.TbErrorInfo = ErrorTbErrorInfo.new(loader.call('error_tberrorinfo'))
    self.TbCodeInfo = ErrorTbCodeInfo.new(loader.call('error_tbcodeinfo'))
    self.TbItem = ItemTbItem.new(loader.call('item_tbitem'))
    self.TbItemFunc = ItemTbItemFunc.new(loader.call('item_tbitemfunc'))
    self.TbItemExtra = ItemTbItemExtra.new(loader.call('item_tbitemextra'))
    self.TbL10NDemo = L10nTbL10NDemo.new(loader.call('l10n_tbl10ndemo'))
    self.TbPatchDemo = L10nTbPatchDemo.new(loader.call('l10n_tbpatchdemo'))
    self.TbSystemMail = MailTbSystemMail.new(loader.call('mail_tbsystemmail'))
    self.TbGlobalMail = MailTbGlobalMail.new(loader.call('mail_tbglobalmail'))
    self.TbRoleLevelExpAttr = RoleTbRoleLevelExpAttr.new(loader.call('role_tbrolelevelexpattr'))
    self.TbRoleLevelBonusCoefficient = RoleTbRoleLevelBonusCoefficient.new(loader.call('role_tbrolelevelbonuscoefficient'))
    self.TbTestTag = TagTbTestTag.new(loader.call('tag_tbtesttag'))
    self.TbFullTypes = TestTbFullTypes.new(loader.call('test_tbfulltypes'))
    self.TbSingleton = TestTbSingleton.new(loader.call('test_tbsingleton'))
    self.TbNotIndexList = TestTbNotIndexList.new(loader.call('test_tbnotindexlist'))
    self.TbMultiUnionIndexList = TestTbMultiUnionIndexList.new(loader.call('test_tbmultiunionindexlist'))
    self.TbMultiIndexList = TestTbMultiIndexList.new(loader.call('test_tbmultiindexlist'))
    self.TbDataFromMisc = TestTbDataFromMisc.new(loader.call('test_tbdatafrommisc'))
    self.TbMultiRowRecord = TestTbMultiRowRecord.new(loader.call('test_tbmultirowrecord'))
    self.TbTestMultiColumn = TestTbTestMultiColumn.new(loader.call('test_tbtestmulticolumn'))
    self.TbMultiRowTitle = TestTbMultiRowTitle.new(loader.call('test_tbmultirowtitle'))
    self.TbTestNull = TestTbTestNull.new(loader.call('test_tbtestnull'))
    self.TbDemoPrimitive = TestTbDemoPrimitive.new(loader.call('test_tbdemoprimitive'))
    self.TbTestString = TestTbTestString.new(loader.call('test_tbteststring'))
    self.TbDemoGroup = TestTbDemoGroup.new(loader.call('test_tbdemogroup'))
    self.TbDemoGroup_C = TestTbDemoGroup_C.new(loader.call('test_tbdemogroup_c'))
    self.TbDemoGroup_S = TestTbDemoGroup_S.new(loader.call('test_tbdemogroup_s'))
    self.TbDemoGroup_E = TestTbDemoGroup_E.new(loader.call('test_tbdemogroup_e'))
    self.TbTestGlobal = TestTbTestGlobal.new(loader.call('test_tbtestglobal'))
    self.TbTestBeRef = TestTbTestBeRef.new(loader.call('test_tbtestberef'))
    self.TbTestBeRef2 = TestTbTestBeRef2.new(loader.call('test_tbtestberef2'))
    self.TbTestRef = TestTbTestRef.new(loader.call('test_tbtestref'))
    self.TbTestSize = TestTbTestSize.new(loader.call('test_tbtestsize'))
    self.TbTestSet = TestTbTestSet.new(loader.call('test_tbtestset'))
    self.TbDetectCsvEncoding = TestTbDetectCsvEncoding.new(loader.call('test_tbdetectcsvencoding'))
    self.TbItem2 = TestTbItem2.new(loader.call('test_tbitem2'))
    self.TbDefineFromExcel = TestTbDefineFromExcel.new(loader.call('test_tbdefinefromexcel'))
    self.TbDefineFromExcelOne = TestTbDefineFromExcelOne.new(loader.call('test_tbdefinefromexcelone'))
    self.TbTestIndex = TestTbTestIndex.new(loader.call('test_tbtestindex'))
    self.TbTestMap = TestTbTestMap.new(loader.call('test_tbtestmap'))
    self.TbExcelFromJson = TestTbExcelFromJson.new(loader.call('test_tbexcelfromjson'))
    self.TbCompositeJsonTable1 = TestTbCompositeJsonTable1.new(loader.call('test_tbcompositejsontable1'))
    self.TbCompositeJsonTable2 = TestTbCompositeJsonTable2.new(loader.call('test_tbcompositejsontable2'))
    self.TbCompositeJsonTable3 = TestTbCompositeJsonTable3.new(loader.call('test_tbcompositejsontable3'))
    self.TbExcelFromJsonMultiRow = TestTbExcelFromJsonMultiRow.new(loader.call('test_tbexcelfromjsonmultirow'))
    self.TbTestSep = TestTbTestSep.new(loader.call('test_tbtestsep'))
    self.TbTestScriptableObject = TestTbTestScriptableObject.new(loader.call('test_tbtestscriptableobject'))
    self.TbTestExternalType = TestTbTestExternalType.new(loader.call('test_tbtestexternaltype'))
    self.TbDemoGroupDefineFromExcel = TestTbDemoGroupDefineFromExcel.new(loader.call('test_tbdemogroupdefinefromexcel'))
    self.TbDefineFromExcel2 = TestTbDefineFromExcel2.new(loader.call('test_tbdefinefromexcel2'))
    self.TbTestExcelBean = TestTbTestExcelBean.new(loader.call('test_tbtestexcelbean'))
    self.TbTestDesc = TestTbTestDesc.new(loader.call('test_tbtestdesc'))
